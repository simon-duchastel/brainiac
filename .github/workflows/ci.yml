name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-test:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
    
    - name: Cache Gradle packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
    
    - name: Cache Kotlin Native
      uses: actions/cache@v4
      with:
        path: ~/.konan
        key: ${{ runner.os }}-konan-${{ hashFiles('**/gradle.properties', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-konan-
    
    - name: Grant execute permission for gradlew (Unix)
      if: runner.os != 'Windows'
      run: chmod +x modules/gradlew
    
    - name: Build JVM targets
      run: cd modules && ./gradlew jvmJar
      shell: bash
    
    - name: Build native targets (Linux)
      if: runner.os == 'Linux'
      run: cd modules && ./gradlew linuxX64MainKlibrary
      shell: bash
    
    - name: Build native targets (macOS)
      if: runner.os == 'macOS'
      run: cd modules && ./gradlew macosX64MainKlibrary macosArm64MainKlibrary
      shell: bash
    
    - name: Build native targets (Windows)
      if: runner.os == 'Windows'
      run: cd modules && ./gradlew mingwX64MainKlibrary
      shell: bash
    
    - name: Run JVM tests
      run: cd modules && ./gradlew jvmTest
      shell: bash
    
    - name: Run JVM checks
      run: cd modules && ./gradlew check
      shell: bash